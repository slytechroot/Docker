#commands

##create docker network
docker network create mongo-network

## start mongodb
sudo docker run -p 27017:27017 -d -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=password --network mongo-network --name mongodb mongo

##start mongo-express
sudo docker run -d -p 8081:8081 -e ME_CONFIG_MONGODB_ADMINUSERNAME=admin -e ME_CONFIG_MONGODB_ADMINPASSWORD=password -e ME_CONFIG_MONGODB_SERVER=mongodb --network mongo-network --name mongo-express mongo-express

- starting your containers like this is too much work.
- introducing 'Docker Compose'#################

!!!!!!!!!!!!!!!

### mongo-docker-compose.yaml
version:'3'
services:
	mongodb: # = container_name
		image: mongo
		ports:
			-27017:27017 # = HOST:CONTAINER
		environment:
			- MONGO_INITDB_ROOT_USERNAME = admin
			- MONGO_INITDB_ROOT_PASSWORD=password
		volumes:
			- mongo-data:/data/db
	mongo-express:
		image: mongo-express
		restart: always
		ports:
			-8080:8081
		environment:
			- ME_CONFIG_MONGODB_ADMINUSERNAME=admin
     			- ME_CONFIG_MONGODB_ADMINPASSWORD=password
			- ME_CONFIG_MONGODB_SERVER=mongodb
    		depends_on:
     			- "mongodb"
		volumes:
  			mongo-data:
    				driver: local

##################

Docker Compose takes care of creating a common Network!!!

!!!! Creating the Docker Compose File !!!!!


version: '3'
services:
  # my-app:
    # image: ${docker-registry}/my-app:1.0
    # ports:
     # - 3000:3000
  mongodb:
    image: mongo
    ports:
     - 27017:27017
    environment:
     - MONGO_INITDB_ROOT_USERNAME=admin
     - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
     - mongo-data:/data/db
  mongo-express:
    image: mongo-express
    restart: always
    ports:
     - 8080:8081
    environment:
     - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
     - ME_CONFIG_MONGODB_ADMINPASSWORD=password
     - ME_CONFIG_MONGODB_SERVER=mongodb
    depends_on:
     - "mongodb"
volumes:
  mongo-data:
    driver: local


################

Recreate container => data lost.
Recreated the container.

Docker Volumes for Data Persistence!

Container Recreation!

npm install - to install dependencies
node server.js

#########

How do we stop the containers?

docker-compose -f mongo.yaml down

(this also removed the network and recreates it the next time)
#########

THE END!!!!!!!!!!





















		
