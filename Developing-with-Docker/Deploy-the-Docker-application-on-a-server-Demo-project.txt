Deploy the docker application on a server - Demo Project

Overview:
Image from a private repository
Deploy from multiple containers
Deployment Server
AWS ECR

- check your docker-image-deploy-to-server.yaml file again.
- copy the AWS ECR my-app repo - Image URI t0 the YAML file.

- name of the file - docker-image-deploy-to-server.yaml - used on the server to deploy all the applications/services.
- the server needs to login to pull from PRIVATE AWS repository.
- Login not needed for PUBLIC DockerHub

docker images
docker run my-app:1.0
(app listening on port 8000!)

############
cat docker-image-deploy-to-server.yaml
version: '3'
services:
  my-app: 
    # image: ${docker-registry}/my-app:1.0
    image: 432223423432.dkr.eu-central-1.amazonaws.com/my-app:1.0
    #ports: host-machine-port:container-port
    ports:
     - 3000:3000
  mongodb:
    image: mongo
    ports:
     - 27017:27017
    environment:
     - MONGO_INITDB_ROOT_USERNAME=admin
     - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
     - mongo-data:/data/db
  mongo-express:
    image: mongo-express
    restart: always
    ports:
     - 8080:8081
    environment:
     - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
     - ME_CONFIG_MONGODB_ADMINPASSWORD=password
     - ME_CONFIG_MONGODB_SERVER=mongodb
    depends_on:
     - "mongodb"
volumes:
  mongo-data:
    driver: local

#########################

The docker-compose file above would be used on the server to deploy all the applications/services. 

docker login
- upload the yaml file to the development server where it will be deployed!!!!
docker-compose -f docker-image-deploy-to-server.yaml up
(check the resulting logs to make sure the service started on port 3000 and 8081-8083)

We can now try to browse the application in the browser. 

- we don't have docker volumes yet to store the database of the application in a permanent storage, so the database gets deleted every time we restart the app.
- in the server.js we needed to change one thing so that the application points to the mongodb database.

############ changed 'let mongoUrlLocal = "mongodb://admin:password@localhost:27017" '; to --- 'let mongoUrlLocal = "mongodb://admin:password@mongodb:27017" '

cat server.js


let express = require('express');
let path = require('path');
let fs = require('fs');
let MongoClient = require('mongodb').MongoClient;
let bodyParser = require('body-parser');
let app = express();

app.use(bodyParser.urlencoded({
  extended: true
}));
app.use(bodyParser.json());

app.get('/', function (req, res) {
    res.sendFile(path.join(__dirname, "index.html"));
  });

app.get('/profile-picture', function (req, res) {
  let img = fs.readFileSync(path.join(__dirname, "images/profile-1.jpg"));
  res.writeHead(200, {'Content-Type': 'image/jpg' });
  res.end(img, 'binary');
});

// use when starting application locally with node command
let mongoUrlLocal = "mongodb://admin:password@localhost:27017";

// use when starting application as a separate docker container
let mongoUrlDocker = "mongodb://admin:password@host.docker.internal:27017";

// use when starting application as docker container, part of docker-compose
let mongoUrlDockerCompose = "mongodb://admin:password@mongodb";

// pass these options to mongo client connect request to avoid DeprecationWarning for cu                                                                                       rrent Server Discovery and Monitoring engine
let mongoClientOptions = { useNewUrlParser: true, useUnifiedTopology: true };

// "user-account" in demo with docker. "my-db" in demo with docker-compose
//let databaseName = "my-db";
let databaseName = "mongodb";

app.post('/update-profile', function (req, res) {
  let userObj = req.body;

  MongoClient.connect(mongoUrlLocal, mongoClientOptions, function (err, client) {
    if (err) throw err;

    let db = client.db(databaseName);
    userObj['userid'] = 1;

    let myquery = { userid: 1 };
    let newvalues = { $set: userObj };

    db.collection("users").updateOne(myquery, newvalues, {upsert: true}, function(err, r                                                                                       es) {
      if (err) throw err;
      client.close();
    });

  });
  // Send response
  res.send(userObj);
});

app.get('/get-profile', function (req, res) {
  let response = {};
  // Connect to the db
  MongoClient.connect(mongoUrlLocal, mongoClientOptions, function (err, client) {
    if (err) throw err;

    let db = client.db(databaseName);

    let myquery = { userid: 1 };

    db.collection("users").findOne(myquery, function (err, result) {
      if (err) throw err;
      response = result;
      client.close();

      // Send response
      res.send(response ? response : {});
    });
  });
});

app.listen(3000, function () {
  console.log("app listening on port 3000!");
});

#################

This concludes the diagram - 0034- Completed diagram for app deployment.jpg.










