create-docker-hosted-repository-on-nexus

Push/Pull Nexus Repository <-------------------

- Create Docker repository on Nexus
Browse to Nexus under Repository - Repositories - choose a name: docker-hosted - DO NOT select 'Path based routing' or anything else - blob store: mystore - Create repo.

---------

Create user role for docker repo <----------------
- we need a user and role that will allow us to login to the 'docker-hosted' repository.

Create a role with 'nx-repository-view-docker-docker-hosted-*' privileges.
Assign the role to our existing user - sly.

Done.

------------

Docker Login to Nexus Docker Repo <-------------

- we need to edit the HTTP (Create an HTTP connector at specified port. Normally used if the server is behind a secure proxy.) so that the script can connect to Nexus. 
- the Docker repo needs it own port to be accessible at

HTTP: 
(Create an HTTP connector at specified port. Normally used if the server is behind a secure proxy.)
8083

Save the changes!

The path is now:
http://192.168.1.113:8083/repository/docker-hosted/

- we need to open the port on the droplet's firewall configuration. That's the DigitalOcean external firewall.
- When we do Docker Login we get a token of authentication from Nexus Repositories for a client. That config is stored in config.json on our local machine (~/.docker/config.json).
- The token in the config.json will be used for push and pull to contact the repository.
- We configure the token in Nexus under Realms, and move to Active - Docker Bearer Token Realm. 
- the Client will be able to reach out to the repository over HTTPS and pull the application, but in our case, we are using HTTP for the Nexus repo, so we need to configure the repo to allow the client to connect over HTTP to pull the repo app.
- We allow http insecure connection by modifying the file daemon.json at /etc/docker/daemon.json on Linux, according to the Docker documentation.
- You could add the configuration in your Docker Desktop as well, under Preferences, and Docker Engine and add from the Docker documentation the "insecure-registries":["192.168.1.113:8083"]

Test so:
docker login 192.168.1.113:8083
username:<redacted>
Password:<redacted>

--------------------

Push Image to Nexus Repo <--------------------
- build an image
docker build -t my-image:1.0 .

- need to re-tag that existing image
docker tag my-image:1.0 192.168.1.113:8083/my-image:1.0

docker images | grep my-image
(you should see 2, one for local and one for the remote IP repo)

#push the image
docker push 192.168.1.113:8083/my-image:1.0

------------------

Fetch Docker Image from Nexus <----------------------
- With Nexus API:
curl -u sly:apass123 -X GET 'http://192.168.1.113:8081/service/rest/v1/components?repository=docker-hosted'

######################

