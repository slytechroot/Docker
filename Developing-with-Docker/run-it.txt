npm init -y
npm install express body-parser

    rm -rf node_modules
    rm package-lock.json
    npm install

node server.js

Don't forget to pull the mongo-db to pull the container.
docker pull mongo

docker pull mongo-express

Run both containers. Let's configure the connection between the mongo and mongo-express.


--------> Docker network <-------------

- we get an isolated docker network when the docker is running.
- the 2 Isolated Docker Network - can talk to each other in the same isolated docker network.
- the server.js will then connect from the outside over a local port number.
- The Node.js application use the index.html and server.js for front end Java container.

docker network ls
docker network create mongo-network
docker network ls

Run Mongo containers with environmental variables for the 'mongodb' database with root user and password:

sudo docker run -p 27017:27017 -d -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=password --name mongodb --network mongo-network mongo


docker logs <container_ID>
docker logs 9f828f545fa2
- to screenshot
docker logs 9f828f545fa2 -f
(now you can mark some changes and wait for new logs to load, that way you don't have to always run the 'docker logs...' command)

#Start the mongo express (example) - https://hub.docker.com/_/mongo-express - on startup!!!

sudo docker run -d -p 8082:8082 -e ME_CONFIG_MONGODB_ADMINUSERNAME=admin -e ME_CONFIG_MONGODB_ADMINPASSWORD=password -e ME_CONFIG_MONGODB_SERVER=mongodb --network mongo-network --name mongo-express mongo-express

OR THIS:

docker run -d -p 8083:8083 -e ME_CONFIG_MONGODB_ADMINUSERNAME=admin -e ME_CONFIG_MONGODB_ADMINPASSWORD=password -e ME_CONFIG_MONGODB_URL=mongodb://admin:password@mongo-service:27017 --network mongo_network --name mongo_express mongo-express


# Works

docker run -d -p 27017:27017 -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=password --name mongo --network mongo-network mongo

docker run -d -p 8081:8081 -e ME_CONFIG_MONGODB_SERVER=mongo -e ME_CONFIG_MONGODB_ADMINUSERNAME=admin -e ME_CONFIG_MONGODB_ADMINPASSWORD=password --name mongo-express --network mongo-network mongo-express 

##########

docker logs <container_id>

- Create a user account database
- and now connect to the user_database

#############

demo app - developing with Docker
This demo app shows a simple user profile app set up using

index.html with pure js and css styles
nodejs backend with express module
mongodb for data storage

All components are docker-based

With Docker

To start the application
Step 1: Create docker network

docker network create mongo-network 
Step 2: start mongodb

docker run -d -p 27017:27017 -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=password --name mongodb --net mongo-network mongo    
Step 3: start mongo-express

docker run -d -p 8081:8081 -e ME_CONFIG_MONGODB_ADMINUSERNAME=admin -e ME_CONFIG_MONGODB_ADMINPASSWORD=password --net mongo-network --name mongo-express -e ME_CONFIG_MONGODB_SERVER=mongodb mongo-express   
NOTE: creating docker-network in optional. You can start both containers in a default network. In this case, just emit --net flag in docker run command
Step 4: open mongo-express from browser

http://localhost:8081
Step 5: create user-account db and users collection in mongo-express
Step 6: Start your nodejs application locally - go to app directory of project

cd app
npm install 
node server.js
Step 7: Access you nodejs application UI from browser

http://localhost:3000

With Docker Compose

To start the application
Step 1: start mongodb and mongo-express

docker-compose -f docker-compose.yaml up
You can access the mongo-express under localhost:8080 from your browser
Step 2: in mongo-express UI - create a new database "my-db"
Step 3: in mongo-express UI - create a new collection "users" in the database "my-db"
Step 4: start node server

cd app
npm install
node server.js
Step 5: access the nodejs application from browser

http://localhost:3000

To build a docker image from the application

docker build -t my-app:1.0 .       
The dot "." at the end of the command denotes location of the Dockerfile.



 



























