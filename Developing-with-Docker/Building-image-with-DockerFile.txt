Building images with Dockerfile <---------------

- use case: you've created/developed a Javascript App feature and you have to deploy it!
- your app should be packages into a docker container
- then you want to commit it to Git
- after that you have a continuous integration (with Jenkins) that runs
- 

DockerFile ----> Docker Image!!!!!


- so what is does is that is builds the JS App & and creates the Docker Image.
- and it pushes it to the Docker Repository

What is a DockerFile?
- copy artifact (jar, war, bundle.js)
- blueprint for building images
- a dockerfile is a blueprint for building images

#######
# start by basing it on another image
#Find a 'node' image (from Docker.com) to base your image from.
#with 'docker pull node' to install the 'node'
FROM node

ENV MONGO_DB_USERNAME=admin
	MONGO_DB_PWD=password
RUN mkdir -p /home/app
#COPY executes on the HOST machine!!!
#Copy current folder to /home/app
COPY . /home/app
#start the app with 'node server.js"
CMD["node","server.js"]
#node is preinstalled because of base image
#CMD is an entrypoint command. You can have multiple RUN commands.

- browse to hub.docket.com to choose the node.

!!!! Create the DockerFile !!!!!!!
FROM node:13-alpine

ENV MONGO_DB_USERNAME=admin \
    MONGO_DB_PWD=password

RUN mkdir -p /home/app

COPY ./app /home/app

# set default dir so that next commands executes in /home/app dir
WORKDIR /home/app

# will execute npm install in /home/app because of WORKDIR
RUN npm install

# no need for /home/app/server.js because of WORKDIR
CMD ["node", "server.js"]

###########################
Build Docker Image from that DockerFile <---------------

docker build -t my-app:1.0 . 
(and it gets built and provides an ID)
(The dot "." at the end of the command denotes location of the Dockerfile.)

docker images
(it will show the new image)

#############

Start 'my-app' containers to verify:
- app starts successfully
- app environment is configured correctly.

docker run my-app:1.0

# when a adjust the dockerfile, you MUST build the IMAGE!!!!

Once I delete a container, I can delete the Image!!!!

- delete an image:
docker rmi <image-id>

docker build -t my-app:1.0 . 

docker images
docker run my-app:1.0

docker ps
docker logs <image-id>

docker exec -it <container-id> /bin/bash
or:
docker exec -it <container-id> /bin/sh

docker stop <imageid>
docket rm <imageid>
docker images
docker run my-app:1.0 /bin/sh
ls
ls /home/app

############## THE END ################





